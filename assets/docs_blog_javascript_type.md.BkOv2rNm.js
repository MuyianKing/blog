import{_ as a,c as s,o as t,a5 as e}from"./chunks/framework.Bpn99mPY.js";const c=JSON.parse('{"title":"JavaScript类型","description":"","frontmatter":{"title":"JavaScript类型","readingTime":false,"sticky":1,"tag":["js基础"]},"headers":[],"relativePath":"docs/blog/javascript/type.md","filePath":"docs/blog/javascript/type.md","lastUpdated":1754818793000}'),l={name:"docs/blog/javascript/type.md"};function n(o,i,h,p,r,k){return t(),s("div",{"data-pagefind-body":!0},i[0]||(i[0]=[e(`<h1 id="javascript类型" tabindex="-1">javascript类型 <a class="header-anchor" href="#javascript类型" aria-label="Permalink to &quot;javascript类型&quot;">​</a></h1><h3 id="类型判断" tabindex="-1">类型判断 <a class="header-anchor" href="#类型判断" aria-label="Permalink to &quot;类型判断&quot;">​</a></h3><h4 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeof&quot;">​</a></h4><blockquote><p>typeof 可以准确的判断除了<code>null</code>以外的其他基本数据类型，基本无法判断出对象的类型</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// object</span></span></code></pre></div><h5 id="typeof-运算符对null的处理" tabindex="-1">typeof 运算符对null的处理 <a class="header-anchor" href="#typeof-运算符对null的处理" aria-label="Permalink to &quot;typeof 运算符对null的处理&quot;">​</a></h5><p>这个bug是第一版Javascript留下来的，javascript中不同对象在底层都表示为二进制，而javascript 中每种数据类型使用3bit表示，会把二进制前三位都为0的判断为object类型。</p><ul><li>000 表示Object类型的数据。</li><li>001 表示Int类型的数据。</li><li>010 表示Double类型的数据。</li><li>100 表示String类型的数据。</li><li>110 表示Boolean类型的数据。</li></ul><p>由于null代表空指针，大多数平台中值为0x00，因此null的类型标签就成了0，所以执行typeof时会返回 ‘object’。</p><h4 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-label="Permalink to &quot;instanceof&quot;">​</a></h4><h6 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h6><ul><li>每一个构造函数有一个原型——prototype，也称为原型对象</li><li>原型对象的属性和方法被所有的实例化对象共享</li><li>原型对象中的constructor指回构造函数</li></ul><h6 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h6><ul><li>所有的实例对象都有<code>__proto__</code>属性指向它的构造函数的<code>原型对象</code></li><li><code>原型对象</code>也有自己的<code>__proto__</code>属性指向它的构造函数的原型对象</li><li>所有对象最后都会指向<code>Objec</code>t的原型对象，而Object的原型对象为null，原型链也到此结束</li></ul><blockquote><p>使用__proto__访问对象的原型MDN不再推荐，使用Object.getPrototypeOf也能达到同样的效果</p></blockquote><blockquote><p>instanceof 便时查找<code>原型链</code>上是否存在指定<code>构造方法</code>来准确判断对象的类型</p></blockquote><h4 id="object-prototype-tostring" tabindex="-1">Object.prototype.toString <a class="header-anchor" href="#object-prototype-tostring" aria-label="Permalink to &quot;Object.prototype.toString&quot;">​</a></h4><ul><li>Object类型的toString()方法，用于返回一个表示该对象的字符——[object Type]，Type表示对象的类型，其属性值取决于调用对象是否有<code>Symbol.toStringTag</code>属性，其值是一个字符串，则它的值将被作为 Type的值。</li><li>number、string、boolean则会调用各自的构造方法的toString。</li></ul><h5 id="object-prototype-tostring-call" tabindex="-1">Object.prototype.toString.call() <a class="header-anchor" href="#object-prototype-tostring-call" aria-label="Permalink to &quot;Object.prototype.toString.call()&quot;">​</a></h5><blockquote><p>使用Object.prototype.toString.call可以准确判断基本类型和复杂类型的类型</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [object Number]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [object Array]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [object Null]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [object Undefined]</span></span></code></pre></div><h3 id="对象的隐式转换" tabindex="-1">对象的隐式转换 <a class="header-anchor" href="#对象的隐式转换" aria-label="Permalink to &quot;对象的隐式转换&quot;">​</a></h3><h4 id="什么是隐式转换" tabindex="-1">什么是隐式转换 <a class="header-anchor" href="#什么是隐式转换" aria-label="Permalink to &quot;什么是隐式转换&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &#39;0&#39;</span></span></code></pre></div><p>上面的代码中数组在和数字进行+操作时，为了能够得到正确的结果，js自动进行了转换</p><h4 id="转换规则" tabindex="-1">转换规则 <a class="header-anchor" href="#转换规则" aria-label="Permalink to &quot;转换规则&quot;">​</a></h4><h5 id="symbol-toprimitive" tabindex="-1">Symbol.toPrimitive <a class="header-anchor" href="#symbol-toprimitive" aria-label="Permalink to &quot;Symbol.toPrimitive&quot;">​</a></h5><blockquote><p>js内部会先判断对象内部是否有Symbol.toPrimitive方法，如果有并且返回的是基本数据类型则返回，否则进行下一步</p></blockquote><h5 id="valueof" tabindex="-1">valueOf <a class="header-anchor" href="#valueof" aria-label="Permalink to &quot;valueOf&quot;">​</a></h5><blockquote><p>同上</p></blockquote><h5 id="tostring" tabindex="-1">toString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString&quot;">​</a></h5><blockquote><p>如果对象没有toString方法或者返回的不是基本数据类型，那么就会报错：<strong><code>TypeError: Cannot convert object to primitive value</code></strong>，意思是无法将对象转换成原始值。</p></blockquote><h4 id="相等比较" tabindex="-1">相等比较 <a class="header-anchor" href="#相等比较" aria-label="Permalink to &quot;相等比较&quot;">​</a></h4><p>与<code>===</code>不同的是，<code>==</code>在比较两个变量时，如果其中一个操作数是对象，另一个是原始值，则会将对象进行上述的隐式转换，这也就是为什么会出现下面的情况:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // true</span></span></code></pre></div>`,35)]))}const g=a(l,[["render",n]]);export{c as __pageData,g as default};
